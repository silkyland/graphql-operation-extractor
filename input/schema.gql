scalar Date

schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

type Query {
  me: User!
  user(id: ID!): User
  allUsers: [User]
  search(term: String!): [SearchResult!]!
  myChats: [Chat!]!
}

type Mutation {
  login(email: String!, password: String!): String!
  signup(username: String!, email: String!, password: String!): String!
  createChat(userId: ID!): Chat!
  sendMessage(chatId: ID!, content: String!): ChatMessage!
}

type Subscription {
  messageSent(chatId: ID!): ChatMessage!
}

enum Role {
  USER
  ADMIN
}

interface Node {
  id: ID!
}

union SearchResult = User | Chat | ChatMessage

type User implements Node {
  id: ID!
  username: String!
  email: String!
  role: Role!
}

type Chat implements Node {
  id: ID!
  users: [User!]!
  messages: [ChatMessage!]!
}

type ChatMessage implements Node {
  id: ID!
  content: String!
  time: Date!
  user: User!
}
